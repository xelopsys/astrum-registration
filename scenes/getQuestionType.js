const Stage = require("telegraf/stage");
const { session } = require("telegraf/session");
const Scene = require("telegraf/scenes/base");
const { leave } = Stage;
// const stage = new Stage();
// const { composer, middleware } = require('../bot.js')
// const bot = new telegraf(data.token);

const getQuestionType = new Scene("getQuestionType");

getQuestionType.on("text", async (ctx) => {
  ctx.session.questionType = ctx.message.text;
  if (
    ctx.session.isStudent === "ha" ||
    ctx.session.isStudent === "yes" ||
    ctx.session.isStudent === "–¥–∞"
  ) {
    if (ctx.session.lang === "üá∑üá∫–†—É—Å—Å–∫–∏–π") {
      if (ctx.session.questionType === "üñ•–æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏") {
        await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ Astrum", {
          reply_markup: {
            keyboard: [["–Ω–∞–∑–∞–¥"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "üí∏–æ–± –æ–ø–ª–∞—Ç–µ") {
        await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ Astrum", {
          reply_markup: {
            keyboard: [["–Ω–∞–∑–∞–¥"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "–¥—Ä—É–≥–æ–µ") {
        await ctx.reply("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?", {
          reply_markup: {
            keyboard: [["–Ω–∞–∑–∞–¥"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∂–∞–ª–æ–±—ã") {
        await ctx.reply(
          "—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å Astrum –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ Astrum?",
          {
            reply_markup: {
              keyboard: [["–Ω–∞–∑–∞–¥"]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
      }
      await ctx.scene.leave("getQuestionType");
      await ctx.scene.enter("getQuestion");
    }

    if (ctx.session.lang === "üá∫üáøO‚Äôzbekcha") {
      if (ctx.session.questionType === "üñ•O`qish haqida") {
        await ctx.reply("O`qish haqida qanday savolingiz bor?", {
          reply_markup: {
            keyboard: [["orqaga"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "üí∏to`lovlar haqida") {
        await ctx.reply("To`lovlar masalasida qanday savolingiz bor", {
          reply_markup: {
            keyboard: [["orqaga"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "boshqa") {
        await ctx.reply("Qiziqtirayotgan savolingizni yozib qoldiring.", {
          reply_markup: {
            keyboard: [["orqaga"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "taklif va shikoyat") {
        await ctx.reply("Qanday shikoyat va takliflaringiz bor?", {
          reply_markup: {
            keyboard: [["orqaga"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      await ctx.scene.leave("getQuestionType");
      await ctx.scene.enter("getQuestion");
    }

    if (ctx.session.lang === "üá¨üáßEnglish") {
      if (ctx.session.questionType === "üñ•about education") {
        await ctx.reply("What you are interested in to ask about education?", {
          reply_markup: {
            keyboard: [["back"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "üí∏about payments") {
        await ctx.reply(
          "What kind of question you want to ask about payments?",
          {
            reply_markup: {
              keyboard: [["back"]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
      }
      if (ctx.session.questionType === "other") {
        await ctx.reply("Insert your question, you are interested in, to ask", {
          reply_markup: {
            keyboard: [["back"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "offer and complains") {
        await ctx.reply("what you want to offer to Astrum or complain about?", {
          reply_markup: {
            keyboard: [["back"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      await ctx.scene.leave("getQuestionType");
      await ctx.scene.enter("getQuestion");
    }

    await ctx.scene.leave("getQuestionType");
    await ctx.scene.enter("getQuestion");
  }

  if (
    ctx.session.isStudent === "yo`q" ||
    ctx.session.isStudent === "no" ||
    ctx.session.isStudent === "–Ω–µ—Ç"
  ) {
    if (ctx.session.lang === "üá∑üá∫–†—É—Å—Å–∫–∏–π") {
      if (ctx.session.questionType === "üñ•–æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏") {
        await ctx.reply("–û –∫–∞–∫–æ–º –∫—É—Ä—Å–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?", {
          reply_markup: {
            keyboard: [
              ["Fullstack", "Data Science"],
              ["Software Engineering"],
              ["–Ω–∞–∑–∞–¥"],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await ctx.scene.leave("getQuestionType");
        // await ctx.scene.enter("getQuestion");
      }
      if (ctx.session.questionType === "üí∏–æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–æ–≤") {
        await ctx.reply("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ?", {
          reply_markup: {
            keyboard: [["–Ω–∞–∑–∞–¥"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await ctx.scene.leave("getQuestionType");
        await ctx.scene.enter("getQuestion");
      }
      if (ctx.session.questionType === "–¥—Ä—É–≥–æ–µ") {
        await ctx.reply("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?", {
          reply_markup: {
            keyboard: [["–Ω–∞–∑–∞–¥"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await ctx.scene.leave("getQuestionType");
        await ctx.scene.enter("getQuestion");
      }

    }

    if (ctx.session.lang === "üá∫üáøO‚Äôzbekcha") {
      if (ctx.session.questionType === "üñ•o`quv kurslari haqida") {
        await ctx.reply("Qaysi yo`nalish haqida ma'lumot olmoqchisiz?", {
          reply_markup: {
            keyboard: [
              ["Fullstack", "Data Science"],
              ["Software Engineering"],
              ["orqaga"],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "üí∏o`quv kurslari to`lovi haqida") {
        await ctx.reply("To`lovlar masalasida qanday savolingiz bor", {
          reply_markup: {
            keyboard: [["orqaga"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await ctx.scene.leave("getQuestionType");
        await ctx.scene.enter("getQuestion");
      }
      if (ctx.session.questionType === "boshqa") {
        await ctx.reply("Qiziqtirayotgan savolingizni yozib qoldiring.", {
          reply_markup: {
            keyboard: [["orqaga"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await ctx.scene.leave("getQuestionType");
        await ctx.scene.enter("getQuestion");
      }
    }

    if (ctx.session.lang === "üá¨üáßEnglish") {
      if (ctx.session.questionType === "üñ•about education courses") {
        await ctx.reply("About what course you want to get information?", {
          reply_markup: {
            keyboard: [
              ["Fullstack", "Data Science"],
              ["Software Engineering"],
              ["back"],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      if (ctx.session.questionType === "üí∏about education courses payments") {
        await ctx.reply("What do you want to ask about payment of courses?", {
          reply_markup: {
            keyboard: [["back"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await ctx.scene.leave("getQuestionType");
        await ctx.scene.enter("getQuestion");
      }
      if (ctx.session.questionType === "other") {
        await ctx.reply("What you are interested in? Insert your question", {
          reply_markup: {
            keyboard: [["back"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await ctx.scene.leave("getQuestionType");
        await ctx.scene.enter("getQuestion");
      }
    }
    await ctx.scene.leave("getQuestionType");
    // await ctx.scene.enter("getBack");
    await ctx.scene.enter("getQuestion");
  }
});

// getQuestionType.on('text', async (ctx) => {
//     ctx.session.number = ctx.message.contact.phone_number
//     console.log(ctx.session.number)
//     if (ctx.session.lang == '—Ä—É—Å') {
//         await ctx.replyWithHTML('Please send me ur FIO rus')
//         console.log(ctx.session.lang)
//     }
//     if (ctx.session.lang == 'UZB') {
//         await ctx.replyWithHTML('please send me ur FIO uzb')
//     }
//     if (ctx.session.lang == 'ENG') {
//         await ctx.replyWithHTML('Please send me ur FIO ENG')
//     }

// })

module.exports = getQuestionType;
