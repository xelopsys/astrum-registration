const Stage = require("telegraf/stage");
const { session } = require("telegraf/session");
const Scene = require("telegraf/scenes/base");
const { leave } = Stage;
const stage = new Stage();

const getDateOfBirth = new Scene("getDateOfBirth");

getDateOfBirth.hears(/^[0-9]{4}$/, async (ctx) => {
  ctx.session.year = ctx.message.text;
  if (ctx.session.lang === "üá∑üá∫–†—É—Å—Å–∫–∏–π") {
    await ctx.reply("–í—ã —Å—Ç—É–¥–µ–Ω—Ç –ò–¢-–∞–∫–∞–¥–µ–º–∏–∏ Astrum?", {
      reply_markup: {
        keyboard: [["–¥–∞", "–Ω–µ—Ç"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
  if (ctx.session.lang === "üá∫üáøO‚Äôzbekcha") {
    await ctx.reply("Siz Astrum IT akademiyasining talabasimisiz?", {
      reply_markup: {
        keyboard: [["ha", "yo'q"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
  if (ctx.session.lang === "üá¨üáßEnglish") {
    await ctx.reply("Are you a student of Astrum IT academy?", {
      reply_markup: {
        keyboard: [["yes", "no"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
  await ctx.scene.leave("getDateOfBirth");
  await ctx.scene.enter("isStudent");
});

// getDateOfBirth.hears("‚óÄÔ∏è –ù–∞–∑–∞–¥", async (ctx) => {
//     ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ", {
//         reply_markup: { remove_keyboard: true },
//     });
//     await ctx.scene.leave("getDateOfBirth");
//     ctx.scene.enter("getName");
// });

// getDateOfBirth.on("text", async (ctx) => {
//     ctx.reply(
//         "–í–≤–µ–¥–∏–¥—Ç–µ —Ç–æ–ª—å–∫–æ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1990" +
//         `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name}`,
//         {
//             reply_markup: {
//                 keyboard: [["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ"]],
//                 resize_keyboard: true,
//                 one_time_keyboard: true,
//             },
//         }
//     );
// });

module.exports = getDateOfBirth;
